/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagementsystem;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author oshan
 */
public class HRView extends javax.swing.JFrame {

    String StartingDate = "";
    String EndingDate = "";
    Person empPerson = new Person();
    Doctor d = new Doctor();
    Nurse n = new Nurse();
    OtherEmployee Oth = new OtherEmployee();
    Employee emp = new Employee();
    int condition = 0;
    HRManager currentHRManager = new HRManager();
    DateHandler HRDateHandler = new DateHandler();

    /**
     * Creates new form HRView
     */
    public HRView() {
        initComponents();
        directEmpPanel.setVisible(false);
        indirectEmpPanel.setVisible(false);
        addButton.setVisible(false);
        updateButton.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        p_contactNoTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        p_firstNameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        p_lastNameTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        p_addressTextField = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        p_nicTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        p_female = new javax.swing.JRadioButton();
        personCheckButton = new javax.swing.JButton();
        P_DOB = new com.toedter.calendar.JDateChooser();
        p_male = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        empIDTextField = new javax.swing.JTextField();
        EmpCheckButton = new javax.swing.JButton();
        indirectEmpPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        otherIDTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        postTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        SectionTextField = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        descTextArea = new javax.swing.JTextArea();
        directEmpPanel = new javax.swing.JPanel();
        D_empIDTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        lableWardID = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        D_empDescTextArea = new javax.swing.JTextArea();
        D_empWardComboBox = new javax.swing.JComboBox<>();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        displayTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        startDate = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        endDate = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        attendanceTable = new javax.swing.JTable();
        showButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        detailsTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        detailsTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personal  Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel6.add(p_contactNoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 260, -1));

        jLabel4.setText("NIC");
        jPanel6.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 30));

        jLabel5.setText("First Name");
        jPanel6.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 30));
        jPanel6.add(p_firstNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 260, -1));

        jLabel6.setText("Last Name");
        jPanel6.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, 30));
        jPanel6.add(p_lastNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 260, -1));

        jLabel7.setText("Contact No.");
        jPanel6.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, 30));

        p_addressTextField.setColumns(20);
        p_addressTextField.setRows(5);
        jScrollPane4.setViewportView(p_addressTextField);

        jPanel6.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 260, -1));

        jLabel8.setText("Address");
        jPanel6.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, 30));
        jPanel6.add(p_nicTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 170, -1));

        jLabel9.setText("Gender");
        jPanel6.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, 40));

        buttonGroup1.add(p_female);
        p_female.setText("Female");
        jPanel6.add(p_female, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 280, -1, -1));

        personCheckButton.setText("check");
        personCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personCheckButtonActionPerformed(evt);
            }
        });
        jPanel6.add(personCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 90, 30));
        jPanel6.add(P_DOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 240, 250, 30));

        buttonGroup1.add(p_male);
        p_male.setText("Male");
        jPanel6.add(p_male, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, -1, -1));

        jLabel21.setText("DOB");
        jPanel6.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, 30));

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Nurse", "Other" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });
        typeComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                typeComboBoxPropertyChange(evt);
            }
        });
        jPanel6.add(typeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 260, -1));

        jLabel13.setText("Type");
        jPanel6.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, 30));

        jPanel5.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 380, 350));

        jLabel10.setText("EmployeeID");
        jPanel5.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 30));

        empIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empIDTextFieldActionPerformed(evt);
            }
        });
        jPanel5.add(empIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 280, -1));

        EmpCheckButton.setText("check");
        EmpCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmpCheckButtonActionPerformed(evt);
            }
        });
        jPanel5.add(EmpCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 90, 30));

        indirectEmpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        indirectEmpPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setText("ID");
        indirectEmpPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, 30));
        indirectEmpPanel.add(otherIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 300, -1));

        jLabel15.setText("Description");
        indirectEmpPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 30));
        indirectEmpPanel.add(postTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 300, -1));

        jLabel16.setText("Section");
        indirectEmpPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 30));

        jLabel17.setText("post.");
        indirectEmpPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, 30));
        indirectEmpPanel.add(SectionTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 300, -1));

        descTextArea.setColumns(20);
        descTextArea.setRows(5);
        jScrollPane6.setViewportView(descTextArea);

        indirectEmpPanel.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 520, 150));

        jPanel5.add(indirectEmpPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, 640, 280));

        directEmpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        directEmpPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        directEmpPanel.add(D_empIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 190, -1));

        jLabel11.setText("ID");
        directEmpPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, 30));

        lableWardID.setText("WardID");
        directEmpPanel.add(lableWardID, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, 30));

        jLabel12.setText("Description");
        directEmpPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, 30));

        D_empDescTextArea.setColumns(20);
        D_empDescTextArea.setRows(5);
        jScrollPane5.setViewportView(D_empDescTextArea);

        directEmpPanel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 490, 160));

        D_empWardComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pediatrics Department ", "Out Patient Department", "Maternity Department", "Diagnostic Medicine ", "Gynecologist Department", "Oncology Department   " }));
        D_empWardComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D_empWardComboBoxActionPerformed(evt);
            }
        });
        directEmpPanel.add(D_empWardComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 290, -1));

        jPanel5.add(directEmpPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, 640, 280));

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        jPanel5.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 340, 120, 50));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel5.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 340, 120, 50));

        displayTextArea.setColumns(20);
        displayTextArea.setRows(5);
        jScrollPane7.setViewportView(displayTextArea);

        jPanel5.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 10, 540, 40));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manage Employee", jPanel2);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "All attendance", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Starting from");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 27));
        jPanel1.add(startDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 30, 132, -1));

        jLabel2.setText("To");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, 27));
        jPanel1.add(endDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, -1, -1));

        attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "employeeID", "count(Date)"
            }
        ));
        attendanceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                attendanceTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(attendanceTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 519, 250));

        showButton.setText("Show");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });
        jPanel1.add(showButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 76, -1));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "detailed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        detailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "employeeID"
            }
        ));
        jScrollPane2.setViewportView(detailsTable);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 480, 250));

        detailsTextArea.setColumns(20);
        detailsTextArea.setRows(5);
        jScrollPane3.setViewportView(detailsTextArea);

        jPanel4.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 480, 50));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Attendance details", jPanel3);

        jLabel3.setText(" - HR Management -");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(24, 24, 24)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        Date start = startDate.getDate();
        Date end = endDate.getDate();
        if (start != null && end != null) {
            //changing date format to compatible with MySQL
            StartingDate = HRDateHandler.DateToString(start);
            EndingDate = HRDateHandler.DateToString(end);

        } else {
            //if either one date is null set dates to get attendance of current month 
            EndingDate = HRDateHandler.getTodayDate();
            StartingDate = HRDateHandler.getFirstOfCurrentMonth();
        }
        currentHRManager.fetchAttendanceDetailsFromTo(StartingDate, EndingDate, attendanceTable);
    }//GEN-LAST:event_showButtonActionPerformed

    private void attendanceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attendanceTableMouseClicked
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        int row = attendanceTable.getSelectedRow();
        String employeeID = "" + attendanceTable.getValueAt(row, 0);
        String empName = "";
        try {
            String getEmpNameSQL = ("select Firstname,lastName from Person,Employee where Employee.employeeID=? and Employee.NIC=Person.NIC;");
            PreparedStatement getEmpNamePrepStat;
            getEmpNamePrepStat = DbcRecept.con.prepareStatement(getEmpNameSQL);
            getEmpNamePrepStat.setString(1, employeeID);
            DbcRecept.rs = getEmpNamePrepStat.executeQuery();
            DbcRecept.rs.next();
            empName = DbcRecept.rs.getString(1) + " " + DbcRecept.rs.getString(2);

            String getDetailsSql = "SELECT * FROM Attendance WHERE (Date(date)>=? and Date(date)<=? and employeeID=?);";
            PreparedStatement getDetailsPrepStat;
            getDetailsPrepStat = DbcRecept.con.prepareStatement(getDetailsSql);
            getDetailsPrepStat.setString(1, StartingDate);
            getDetailsPrepStat.setString(2, EndingDate);
            getDetailsPrepStat.setString(3, employeeID);
            DbcRecept.rs = getDetailsPrepStat.executeQuery();
            detailsTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));
            detailsTextArea.setText("Employee Name : " + empName);

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);

        }

    }//GEN-LAST:event_attendanceTableMouseClicked

    private void personCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personCheckButtonActionPerformed
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        String nic = p_nicTextField.getText();
        directEmpPanel.setVisible(false);
        indirectEmpPanel.setVisible(false);
        addButton.setVisible(false);
        updateButton.setVisible(false);
        if (nic != null) {
            String checkSql = "SELECT * FROM Person WHERE NIC=?;";
            PreparedStatement checkPrepStat;
            try {
                checkPrepStat = DbcRecept.con.prepareStatement(checkSql);
                checkPrepStat.setString(1, nic);
                DbcRecept.rs = checkPrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    condition = 1;
                    empPerson = new Person(DbcRecept.rs);
                    //set personal details view on personal details panel 
                    setEmpPeronalDetails(empPerson);
                    String checkEmployeeSql = "SELECT * FROM Employee WHERE NIC=?;";
                    PreparedStatement checkEmployeePrepStat;
                    checkEmployeePrepStat = DbcRecept.con.prepareStatement(checkEmployeeSql);
                    checkEmployeePrepStat.setString(1, nic);
                    DbcRecept.rs = checkEmployeePrepStat.executeQuery();
                    int type = 0;
                    if (DbcRecept.rs.next()) {
                        //when employee already in the database
                        displayTextArea.setText("Employee exist in the database !!");

                        type = DbcRecept.rs.getInt("type");
                        int empId = DbcRecept.rs.getInt("employeeID");
                        System.out.println("empId is " + empId);
                        empIDTextField.setText("" + empId);
                        updateButton.setVisible(true);
                        switch (type) {
                            case 0:
                                //when employee is a doctor
                                typeComboBox.setSelectedIndex(0);
                                directEmpPanel.setVisible(true);
                                indirectEmpPanel.setVisible(false);
                                d = new Doctor();
                                d.setDoctor(empId);
                                setDirectEmpDetails(d);
                                break;

                            case 1:
                                //when Employee is a Nurse
                                typeComboBox.setSelectedIndex(1);
                                directEmpPanel.setVisible(true);
                                indirectEmpPanel.setVisible(false);
                                n = new Nurse();
                                n.setNurse(empId);
                                setDirectEmpDetails(n);
                                break;

                            case 2:
                                //when employee is a other
                                typeComboBox.setSelectedIndex(2);
                                directEmpPanel.setVisible(false);
                                indirectEmpPanel.setVisible(true);
                                Oth = new OtherEmployee();
                                Oth.setOtherEmployee(empId);
                                setInDirectEmpDetails(Oth);
                                System.out.println("seting otherEmployeeDeatils");
                                break;
                        }

                    } else {
                        //personal details related to given nic exist on the database
                        //set global condition to 2 which represent personal details exist but not a employee
                        condition = 2;
                        displayTextArea.setText("NO employee found with given NIC !!");

                        addButton.setVisible(true);
                        updateButton.setVisible(false);
                        viewEmpdetailsAcordingly();

                    }

                } else {
                    //neither personal details nor employee details exidt in the data base
                    //set global condition to vaue 3 which represent above scenario
                    condition = 3;
                    displayTextArea.setText("NO person found with given NIC !!");
                    addButton.setVisible(true);
                    updateButton.setVisible(false);
                    viewEmpdetailsAcordingly();

                }
            } catch (SQLException ex) {

                Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_personCheckButtonActionPerformed

    void handlePersonalDetailsInsert() {
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        System.out.println("in handlePeronalData method ");
        Date date_DOB = P_DOB.getDate();
        System.out.println("selected Dob " + date_DOB);
        String DOB = "";
        if (date_DOB != null) {
            //changing date format to compatible with MySQL
            System.out.println("date is selcted");
            SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");
            DOB = Date_Format.format(date_DOB);
        }
        String NIC = p_nicTextField.getText();
        String firstName = p_firstNameTextField.getText();
        String lastName = p_lastNameTextField.getText();
        String address = p_addressTextField.getText();
        String contactNumber = p_contactNoTextField.getText();
        String gender = "";

        //getting user input data of gender
        if (p_male.isSelected()) {
            gender = "M";
        } else if (p_female.isSelected()) {
            gender = "F";
        }
        String regex = "\\d+";

        if (DOB.isEmpty() || NIC.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || address.isEmpty() || contactNumber.isEmpty() || gender.isEmpty() || !(contactNumber.matches(regex))) {
            JOptionPane.showMessageDialog(null, "Some fields are left blank or not matching, Fill all fields correctly.");
        } else {
            try {
                String insertSql = "INSERT INTO Person (NIC, firstName ,lastName ,address ,contactNumber ,gender ,DOB) VALUES (?,?,?,?,?,?,?) ;";
                PreparedStatement insertPrepStat;
                insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                insertPrepStat.setString(1, NIC);
                insertPrepStat.setString(2, firstName);
                insertPrepStat.setString(3, lastName);
                insertPrepStat.setString(4, address);
                insertPrepStat.setString(5, contactNumber);
                insertPrepStat.setString(6, gender);
                insertPrepStat.setString(7, DOB);

                insertPrepStat.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    void handlePersonalDetailsUpdate() {
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        System.out.println("in handlePeronalData method ");
        Date date_DOB = P_DOB.getDate();
        System.out.println("selected Dob " + date_DOB);
        String DOB = "";
        if (date_DOB != null) {
            //changing date format to compatible with MySQL
            System.out.println("date is selcted");
            SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");
            DOB = Date_Format.format(date_DOB);
        }
        String NIC = p_nicTextField.getText();
        String firstName = p_firstNameTextField.getText();
        String lastName = p_lastNameTextField.getText();
        String address = p_addressTextField.getText();
        String contactNumber = p_contactNoTextField.getText();
        String gender = "";

        //getting user input data of gender
        if (p_male.isSelected()) {
            gender = "M";
        } else if (p_female.isSelected()) {
            gender = "F";
        }
        String regex = "\\d+";

        if (DOB.isEmpty() || NIC.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || address.isEmpty() || contactNumber.isEmpty() || gender.isEmpty() || !(contactNumber.matches(regex))) {
            JOptionPane.showMessageDialog(null, "Some fields are left blank or not matching, Fill all fields correctly.");
        } else if (condition == 2 || condition == 1) {
            try {
                System.out.println("updating values...");
                String updateSql = "UPDATE Person SET firstName=?, lastName=?, address=?, contactNumber=?, gender=?, DOB=? WHERE NIC= ? ;";
                PreparedStatement updatePrepStat;
                updatePrepStat = DbcRecept.con.prepareStatement(updateSql);
                updatePrepStat.setString(1, firstName);
                updatePrepStat.setString(2, lastName);
                updatePrepStat.setString(3, address);
                updatePrepStat.setString(4, contactNumber);
                updatePrepStat.setString(5, gender);
                updatePrepStat.setString(6, DOB);
                updatePrepStat.setString(7, NIC);
                updatePrepStat.executeUpdate();

            } catch (SQLException ex) {
                Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (condition == 3) {
            try {
                String insertSql = "INSERT INTO Person (NIC, firstName ,lastName ,address ,contactNumber ,gender ,DOB) VALUES (?,?,?,?,?,?,?) ;";
                PreparedStatement insertPrepStat;
                insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                insertPrepStat.setString(1, NIC);
                insertPrepStat.setString(2, firstName);
                insertPrepStat.setString(3, lastName);
                insertPrepStat.setString(4, address);
                insertPrepStat.setString(5, contactNumber);
                insertPrepStat.setString(6, gender);
                insertPrepStat.setString(7, DOB);

                insertPrepStat.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    void handleEmployeeDetailsInsert() {
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        try {
            int empID = 0;
            try {
                empID = Integer.parseInt(empIDTextField.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "invalid employyeID !!");
            }

            int type = typeComboBox.getSelectedIndex();
            String NIC = p_nicTextField.getText();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date today = new Date();
            String insertEmployeeSql = "INSERT INTO Employee (employeeID, joinedDate, NIC, type) VALUES (?,?,?,?) ;";
            PreparedStatement insertEmployeePrepStat;
            insertEmployeePrepStat = DbcRecept.con.prepareStatement(insertEmployeeSql);
            insertEmployeePrepStat.setInt(1, empID);
            insertEmployeePrepStat.setString(2, dateFormat.format(today));
            insertEmployeePrepStat.setString(3, NIC);
            insertEmployeePrepStat.setInt(4, type);
            insertEmployeePrepStat.executeUpdate();
            switch (type) {
                //employeee is a doctor
                case 0:

                    d.employeeID = Integer.parseInt(empIDTextField.getText());
                    d.drID = D_empIDTextField.getText();
                    d.wardID = "" + D_empWardComboBox.getSelectedIndex();
                    d.description = D_empDescTextArea.getText();
                    //fields are not properly filled
                    if (d.drID.isEmpty() || d.description.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");

                    } else {
                        try {
                            System.out.println("inserting Doctors details to doctor table");
                            String insertDoctorSql = "INSERT INTO Doctor (drID, description, wardID, employeeID) VALUES (?,?,?,?) ;";
                            PreparedStatement insertDoctorPrepStat;
                            insertDoctorPrepStat = DbcRecept.con.prepareStatement(insertDoctorSql);
                            insertDoctorPrepStat.setString(1, d.drID);
                            insertDoctorPrepStat.setString(2, d.description);
                            insertDoctorPrepStat.setString(3, d.wardID);
                            insertDoctorPrepStat.setInt(4, d.employeeID);
                            insertDoctorPrepStat.executeUpdate();
                        } catch (SQLException ex) {
                            Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    break;

                //employeee is a Nurse
                case 1:
                    n.employeeID = Integer.parseInt(empIDTextField.getText());
                    n.nurseID = D_empIDTextField.getText();
                    n.wardID = "" + D_empWardComboBox.getSelectedIndex();
                    n.description = D_empDescTextArea.getText();
                    //fields are not properly filled
                    if (n.nurseID.isEmpty() || n.description.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");

                    } else {
                        try {
                            String insertSql = "INSERT INTO Nurse (nurseID, description, EmployeeID, wardID) VALUES (?,?,?,?) ;";
                            PreparedStatement insertPrepStat;
                            insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                            insertPrepStat.setString(1, n.nurseID);
                            insertPrepStat.setString(2, n.description);
                            insertPrepStat.setInt(3, n.employeeID);
                            insertPrepStat.setString(4, n.wardID);
                            insertPrepStat.executeUpdate();
                        } catch (SQLException ex) {
                            Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    break;

                case 2:
                    Oth.employeeID = Integer.parseInt(empIDTextField.getText());
                    Oth.OtherID = empIDTextField.getText();
                    Oth.post = postTextField.getText();
                    Oth.description = descTextArea.getText();
                    Oth.section = SectionTextField.getText();
                    if (Oth.OtherID.isEmpty() || Oth.description.isEmpty() || Oth.post.isEmpty()||Oth.section.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");

                    } else {
                        try {
                        String insertSql = "INSERT INTO OtherEmployee (OtherID, description, section, post, employeeID) VALUES (?,?,?,?,?) ;";
                        PreparedStatement insertPrepStat;
                        insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                        insertPrepStat.setString(1, Oth.OtherID);
                        insertPrepStat.setString(2, Oth.description);
                        insertPrepStat.setString(3, Oth.section);
                        insertPrepStat.setString(4, Oth.post);
                        insertPrepStat.setInt(5, Oth.employeeID);
                        insertPrepStat.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    }

                    break;

            }
        } catch (SQLException ex) {
            Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void handleEmployeeDetailsUpdate() {
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        int type = typeComboBox.getSelectedIndex();
        switch (type) {
            //employeee is a doctor
            case 0:

                d.drID = D_empIDTextField.getText();
                d.wardID = "" + D_empWardComboBox.getSelectedIndex();
                d.description = D_empDescTextArea.getText();
                //fields are not properly filled
                if (d.drID.isEmpty() || d.description.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");

                } //employee in datatbse
                else if (condition == 1) {
                    try {
                        String updateDoctorSql = "UPDATE Doctor SET drID=?, description=?, wardID=? WHERE employeeID=?  ;";
                        PreparedStatement updateDoctorPrepStat;
                        updateDoctorPrepStat = DbcRecept.con.prepareStatement(updateDoctorSql);
                        updateDoctorPrepStat.setString(1, d.drID);
                        updateDoctorPrepStat.setString(2, d.description);
                        updateDoctorPrepStat.setString(3, d.wardID);
                        updateDoctorPrepStat.setInt(4, d.employeeID);
                        updateDoctorPrepStat.executeUpdate();
                    } //employee not in database
                    catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (condition == 2 || condition == 3) {
                    try {
                        String insertDoctorSql = "INSERT INTO Doctor (drID, description, wardID, employeeID) VALUES (?,?,?,?) ;";
                        PreparedStatement insertDoctorPrepStat;
                        insertDoctorPrepStat = DbcRecept.con.prepareStatement(insertDoctorSql);
                        insertDoctorPrepStat.setString(1, d.drID);
                        insertDoctorPrepStat.setString(2, d.description);
                        insertDoctorPrepStat.setString(3, d.wardID);
                        insertDoctorPrepStat.setInt(4, d.employeeID);
                        insertDoctorPrepStat.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                break;

            //employeee is a Nurse
            case 1:
                System.out.println("case1 nurse emp id" + n.employeeID);
                n.nurseID = D_empIDTextField.getText();
                n.wardID = "" + D_empWardComboBox.getSelectedIndex();
                n.description = D_empDescTextArea.getText();
                //fields are not properly filled
                if (n.nurseID.isEmpty() || n.description.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");

                }//employee in datatbse
                else if (condition == 1) {
                    try {
                        System.out.println("Updating nurse empolyee details");

                        String insertSql = "UPDATE Nurse set nurseID=?, description=?, wardID=? WHERE EmployeeID=?;";
                        PreparedStatement insertPrepStat;
                        insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                        insertPrepStat.setString(1, n.nurseID);
                        insertPrepStat.setString(2, n.description);
                        insertPrepStat.setString(3, n.wardID);
                        System.out.println(" in handlEmployee details,  nurse wardID= " + n.wardID);
                        System.out.println("nurse.empID" + n.employeeID);
                        insertPrepStat.setInt(4, n.employeeID);
                        insertPrepStat.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } //employee not in database
                else if (condition == 2 || condition == 3) {
                    try {
                        System.out.println("inserting nurse empolyee details");
                        String insertSql = "INSERT INTO Nurse (nurseID, description, EmployeeID, wardID) VALUES (?,?,?,?) ;";
                        PreparedStatement insertPrepStat;
                        insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                        insertPrepStat.setString(1, n.nurseID);
                        insertPrepStat.setString(2, n.description);
                        insertPrepStat.setInt(3, n.employeeID);
                        insertPrepStat.setString(4, n.wardID);
                        insertPrepStat.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                break;

            //employeee is from other 
            case 2:
                Oth.OtherID = empIDTextField.getText();
                Oth.post = postTextField.getText();
                Oth.description = descTextArea.getText();
                Oth.section = SectionTextField.getText();

                //fields are not properly filled
                if (Oth.post.isEmpty() || Oth.OtherID.isEmpty() || Oth.description.isEmpty() || Oth.section.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");

                }

                //employee in datatbse
                if (condition == 1) {
                    try {
                        String insertSql = "UPDATE OtherEmployee set OtherID=?, description=?, section=?, post=?, employeeID=? WHERE EmployeeID=?;";
                        PreparedStatement insertPrepStat;
                        insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                        insertPrepStat.setString(1, Oth.OtherID);
                        insertPrepStat.setString(2, Oth.description);
                        insertPrepStat.setString(3, Oth.section);
                        insertPrepStat.setString(4, Oth.post);
                        insertPrepStat.setInt(5, Oth.employeeID);
                        insertPrepStat.setInt(6, Oth.employeeID);
                        insertPrepStat.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } //employee not in database
                else if (condition == 2 || condition == 3) {
                    try {
                        String insertSql = "INSERT INTO OtherEmployee (OtherID, description, section, post, employeeID) VALUES (?,?,?,?,?) ;";
                        PreparedStatement insertPrepStat;
                        insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                        insertPrepStat.setString(1, Oth.OtherID);
                        insertPrepStat.setString(2, Oth.description);
                        insertPrepStat.setString(3, Oth.section);
                        insertPrepStat.setString(4, Oth.post);
                        insertPrepStat.setInt(5, Oth.employeeID);
                        insertPrepStat.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                break;

        }
    }

    void viewEmpdetailsAcordingly() {
        //set employee the correct pane visible acording to employee type
        int type = typeComboBox.getSelectedIndex();

        switch (type) {
            case 0:
                directEmpPanel.setVisible(true);
                indirectEmpPanel.setVisible(false);
                break;

            case 1:
                directEmpPanel.setVisible(true);
                indirectEmpPanel.setVisible(false);
                break;

            case 2:
                indirectEmpPanel.setVisible(true);
                directEmpPanel.setVisible(false);
                break;

        }
    }

    void setDirectEmpDetails(Doctor d) {
        D_empIDTextField.setText(d.drID);
        D_empDescTextArea.setText(d.description);
        System.out.println("d.wardID is " + d.wardID);
        D_empWardComboBox.setSelectedIndex(Integer.parseInt(d.wardID));

    }

    void setDirectEmpDetails(Nurse n) {
        D_empIDTextField.setText(n.nurseID);
        D_empDescTextArea.setText(n.description);
        System.out.println("n.wardID is " + n.wardID);

        D_empWardComboBox.setSelectedIndex(Integer.parseInt(n.wardID));
    }

    void setInDirectEmpDetails(OtherEmployee oth) {
        otherIDTextField.setText(oth.OtherID);
        descTextArea.setText(oth.description);
        postTextField.setText(oth.post);
        SectionTextField.setText(oth.section);

    }


    private void EmpCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmpCheckButtonActionPerformed
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        String employeeID = empIDTextField.getText();
        if (employeeID != null) {
            try {
                String getEmpNameSQL = ("select * from Person,Employee where Employee.employeeID=? and Employee.NIC=Person.NIC;");
                PreparedStatement getEmpNamePrepStat;
                getEmpNamePrepStat = DbcRecept.con.prepareStatement(getEmpNameSQL);
                getEmpNamePrepStat.setString(1, employeeID);
                DbcRecept.rs = getEmpNamePrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    empPerson = new Person(DbcRecept.rs);
                    setEmpPeronalDetails(empPerson);
                }
            } catch (SQLException ex) {
                Logger.getLogger(HRView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_EmpCheckButtonActionPerformed

    private void empIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empIDTextFieldActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        addButton.setVisible(false);
        updateButton.setVisible(false);
        if (condition == 1) {
            handlePersonalDetailsUpdate();
            handleEmployeeDetailsUpdate();
        } else {
            System.out.println("update cannot be pressed when condition " + condition);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        int type = typeComboBox.getSelectedIndex();

        switch (type) {
            case 0:
                directEmpPanel.setVisible(true);
                indirectEmpPanel.setVisible(false);
                break;

            case 1:
                directEmpPanel.setVisible(true);
                indirectEmpPanel.setVisible(false);
                break;

            case 2:
                indirectEmpPanel.setVisible(true);
                directEmpPanel.setVisible(false);
                break;

            case 3:
                indirectEmpPanel.setVisible(true);
                directEmpPanel.setVisible(false);
                break;

        }
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addButton.setVisible(false);
        updateButton.setVisible(false);
        if (condition == 2) {
            handlePersonalDetailsUpdate();
            handleEmployeeDetailsInsert();
        } else if (condition == 3) {
            handlePersonalDetailsInsert();
            handleEmployeeDetailsInsert();
        } else {
            System.out.println("add cannot be pressed when condition " + condition);
        }

    }//GEN-LAST:event_addButtonActionPerformed

    private void typeComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_typeComboBoxPropertyChange


    }//GEN-LAST:event_typeComboBoxPropertyChange

    private void D_empWardComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D_empWardComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_D_empWardComboBoxActionPerformed

    void setEmpPeronalDetails(Person p) {
        p_nicTextField.setText(p.NIC);
        p_lastNameTextField.setText(p.lastName);
        p_firstNameTextField.setText(p.firstName);
        p_addressTextField.setText(p.address);
        p_contactNoTextField.setText(p.contactNumber);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            P_DOB.setDate(format.parse(p.DOB));
        } catch (ParseException ex) {
            Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (p.gender.equals("M")) {
            p_male.setSelected(rootPaneCheckingEnabled);

        } else if (p.gender.equals("F")) {
            p_female.setSelected(rootPaneCheckingEnabled);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HRView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HRView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HRView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HRView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HRView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea D_empDescTextArea;
    private javax.swing.JTextField D_empIDTextField;
    private javax.swing.JComboBox<String> D_empWardComboBox;
    private javax.swing.JButton EmpCheckButton;
    private com.toedter.calendar.JDateChooser P_DOB;
    private javax.swing.JTextField SectionTextField;
    private javax.swing.JButton addButton;
    private javax.swing.JTable attendanceTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextArea descTextArea;
    private javax.swing.JTable detailsTable;
    private javax.swing.JTextArea detailsTextArea;
    private javax.swing.JPanel directEmpPanel;
    private javax.swing.JTextArea displayTextArea;
    private javax.swing.JTextField empIDTextField;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JPanel indirectEmpPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lableWardID;
    private javax.swing.JTextField otherIDTextField;
    private javax.swing.JTextArea p_addressTextField;
    private javax.swing.JTextField p_contactNoTextField;
    private javax.swing.JRadioButton p_female;
    private javax.swing.JTextField p_firstNameTextField;
    private javax.swing.JTextField p_lastNameTextField;
    private javax.swing.JRadioButton p_male;
    private javax.swing.JTextField p_nicTextField;
    private javax.swing.JButton personCheckButton;
    private javax.swing.JTextField postTextField;
    private javax.swing.JButton showButton;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
