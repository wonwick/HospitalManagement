/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagementsystem;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author oshan
 */
public class DoctorsView extends javax.swing.JFrame {

    /**
     * Creates new form DoctorsView
     */
    Doctor d = new Doctor();
    Patient p = new Patient();
    //String UserEmpID=d.drID;
    String UserEmpID = "D1001";
    int drPatientID;
    int patientID = 0;

    public DoctorsView() {
        initComponents();

        ChangeDrInchargeButton.setVisible(false);
        DischargeButton.setVisible(false);
        OrderButton.setVisible(false);
        ReferButton.setVisible(false);

        OrderTestButton.setVisible(false);
        OrderTreatmentButton.setVisible(false);
        OrderPatientNameLabel.setVisible(false);

        DrInchargeButton.setVisible(false);
        AssignButton.setVisible(false);
        ReferDocPatientNameLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DoctorViewTabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        assignedPatientsTable = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TreatmentTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        TreatmentTextArea = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TestTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        TestTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        ResultTextArea = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        myPatientTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        MyPatientCheckButton = new javax.swing.JButton();
        OrderButton = new javax.swing.JButton();
        ReferButton = new javax.swing.JButton();
        DischargeButton = new javax.swing.JButton();
        ChangeDrInchargeButton = new javax.swing.JButton();
        patientName = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        OrderTreatmentButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TreatDescriptionTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TreatmentChargesTextField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        OrderTestButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TestDescriptionTextArea = new javax.swing.JTextArea();
        TestChargesTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        OrderPatientIDTextField = new javax.swing.JTextField();
        OrderCheckButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        OrderPatientNameLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        ReferADocTextField = new javax.swing.JTextField();
        ReferADoctorCheckButton = new javax.swing.JButton();
        ReferDocPatientNameLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        AssignedDoctorsTable = new javax.swing.JTable();
        AssignButton = new javax.swing.JButton();
        DrInchargeButton = new javax.swing.JButton();
        UnAssignedPannel = new javax.swing.JPanel();
        notAssignedDrPanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        notAssignedDoctorsTabls = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        NotAssignedDescTextArea = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        assignedPatientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "drPatientID", "patientID", "firstName", "LastName"
            }
        ));
        assignedPatientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assignedPatientsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(assignedPatientsTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 56, 387, 335));

        TreatmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TreatmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TreatmentTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TreatmentTable);

        TreatmentTextArea.setColumns(20);
        TreatmentTextArea.setRows(5);
        jScrollPane8.setViewportView(TreatmentTextArea);

        jLabel10.setText("Treatment");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .addComponent(jScrollPane8)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105))
        );

        jTabbedPane2.addTab("Treatments", jPanel3);

        TestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TestTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TestTable);

        TestTextArea.setColumns(20);
        TestTextArea.setRows(5);
        jScrollPane6.setViewportView(TestTextArea);

        jLabel3.setText("Test");

        ResultTextArea.setColumns(20);
        ResultTextArea.setRows(5);
        jScrollPane7.setViewportView(ResultTextArea);

        jLabel9.setText("Result");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
        );

        jTabbedPane2.addTab("Tests", jPanel4);

        jPanel1.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(417, 12, -1, 393));

        myPatientTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myPatientTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(myPatientTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 16, 209, -1));

        jLabel2.setText("Patient ID");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 21, -1, -1));

        MyPatientCheckButton.setText("Check");
        MyPatientCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyPatientCheckButtonActionPerformed(evt);
            }
        });
        jPanel1.add(MyPatientCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(316, 9, 70, 40));

        OrderButton.setText("Order Treatment OR Test");
        OrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderButtonActionPerformed(evt);
            }
        });
        jPanel1.add(OrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(637, 428, -1, 41));

        ReferButton.setText("Refer a Doctor");
        ReferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReferButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ReferButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(871, 428, 147, 41));

        DischargeButton.setText("Discharge Patient");
        DischargeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DischargeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(DischargeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 428, 147, 41));

        ChangeDrInchargeButton.setText("Change Doctor Incharge");
        ChangeDrInchargeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeDrInchargeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ChangeDrInchargeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 428, 210, 41));

        DoctorViewTabs.addTab("My patients", jPanel1);

        patientName.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order Treatment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        OrderTreatmentButton.setText("Order Treatment");
        OrderTreatmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderTreatmentButtonActionPerformed(evt);
            }
        });
        jPanel11.add(OrderTreatmentButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 350, -1, -1));

        TreatDescriptionTextArea.setColumns(20);
        TreatDescriptionTextArea.setRows(5);
        jScrollPane4.setViewportView(TreatDescriptionTextArea);

        jPanel11.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 340, 230));

        jLabel1.setText("Description");
        jPanel11.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        jLabel6.setText("Charge");
        jPanel11.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, 30));
        jPanel11.add(TreatmentChargesTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 340, -1));

        patientName.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 73, 490, 390));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order Test", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        OrderTestButton.setText("Order Test");
        OrderTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderTestButtonActionPerformed(evt);
            }
        });
        jPanel9.add(OrderTestButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 340, -1, -1));

        TestDescriptionTextArea.setColumns(20);
        TestDescriptionTextArea.setRows(5);
        jScrollPane5.setViewportView(TestDescriptionTextArea);

        jPanel9.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 340, 230));
        jPanel9.add(TestChargesTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, 340, -1));

        jLabel7.setText("Charge");
        jPanel9.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, -1, 30));

        jLabel8.setText("Description");
        jPanel9.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        patientName.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(529, 72, 480, 390));

        OrderPatientIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderPatientIDTextFieldActionPerformed(evt);
            }
        });
        patientName.add(OrderPatientIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 13, 327, -1));

        OrderCheckButton.setText("Check");
        OrderCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderCheckButtonActionPerformed(evt);
            }
        });
        patientName.add(OrderCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(444, 12, -1, -1));

        jLabel5.setText("Patient ID");
        patientName.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 18, -1, -1));

        OrderPatientNameLabel.setText("jLabel11");
        patientName.add(OrderPatientNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, -1));

        DoctorViewTabs.addTab("Order Test OR Treatments", patientName);

        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Patient ID");
        jPanel7.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 18, -1, -1));

        ReferADocTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReferADocTextFieldActionPerformed(evt);
            }
        });
        jPanel7.add(ReferADocTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 13, 311, -1));

        ReferADoctorCheckButton.setText("Check");
        ReferADoctorCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReferADoctorCheckButtonActionPerformed(evt);
            }
        });
        jPanel7.add(ReferADoctorCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 12, -1, -1));

        ReferDocPatientNameLabel.setText("jLabel11");
        jPanel7.add(ReferDocPatientNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "assigned Doctors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        AssignedDoctorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(AssignedDoctorsTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 490, 180));

        AssignButton.setText("Assign Doctor");
        AssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignButtonActionPerformed(evt);
            }
        });
        jPanel7.add(AssignButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 420, -1, 40));

        DrInchargeButton.setText("Change Doctor Incharge");
        DrInchargeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DrInchargeButtonActionPerformed(evt);
            }
        });
        jPanel7.add(DrInchargeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 300, 110));

        notAssignedDrPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "assigned Doctors", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        notAssignedDoctorsTabls.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        notAssignedDoctorsTabls.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notAssignedDoctorsTablsMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(notAssignedDoctorsTabls);

        javax.swing.GroupLayout notAssignedDrPanelLayout = new javax.swing.GroupLayout(notAssignedDrPanel);
        notAssignedDrPanel.setLayout(notAssignedDrPanelLayout);
        notAssignedDrPanelLayout.setHorizontalGroup(
            notAssignedDrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notAssignedDrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        notAssignedDrPanelLayout.setVerticalGroup(
            notAssignedDrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notAssignedDrPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        NotAssignedDescTextArea.setColumns(20);
        NotAssignedDescTextArea.setRows(5);
        jScrollPane9.setViewportView(NotAssignedDescTextArea);

        jLabel12.setText("Description");

        javax.swing.GroupLayout UnAssignedPannelLayout = new javax.swing.GroupLayout(UnAssignedPannel);
        UnAssignedPannel.setLayout(UnAssignedPannelLayout);
        UnAssignedPannelLayout.setHorizontalGroup(
            UnAssignedPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UnAssignedPannelLayout.createSequentialGroup()
                .addGroup(UnAssignedPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UnAssignedPannelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(UnAssignedPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notAssignedDrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(UnAssignedPannelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(UnAssignedPannelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel12)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UnAssignedPannelLayout.setVerticalGroup(
            UnAssignedPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UnAssignedPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notAssignedDrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        jPanel7.add(UnAssignedPannel, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 510, 370));

        DoctorViewTabs.addTab("Refer a Doctor", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DoctorViewTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(DoctorViewTabs)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ReferADocTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReferADocTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ReferADocTextFieldActionPerformed

    private void OrderCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderCheckButtonActionPerformed
        try {
            DBConnect DbcRecept = new DBConnect();
            DbcRecept.connectdb();
            patientID = -1;
            try {
                patientID = Integer.parseInt(OrderPatientIDTextField.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid PatientID");

            }
            if (patientID == -1) {

            } else {
                String CheckSQL = null;
                PreparedStatement checkPrepStat;
                CheckSQL = "SELECT drPatientID, drPatient.patientID, firstName, lastName FROM drPatient,Person,Patient WHERE (Patient.NIC=Person.NIC AND drPatient.DrID=? AND drPatient.patientID=? AND drPatient.patientID =Patient.patientID AND (dischargedDate IS NULL))";
                checkPrepStat = DbcRecept.con.prepareStatement(CheckSQL);
                checkPrepStat.setString(1, UserEmpID);
                checkPrepStat.setInt(2, patientID);
                DbcRecept.rs = checkPrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    drPatientID = DbcRecept.rs.getInt("drPatientID");
                    p.setPatient(patientID);
                    OrderTestButton.setVisible(true);
                    OrderTreatmentButton.setVisible(true);
                    OrderPatientNameLabel.setText(p.firstName + " " + p.lastName);
                    OrderPatientNameLabel.setVisible(true);

                } else {
                    JOptionPane.showMessageDialog(null, "No patient with given patientID is Assigned to you");
                    OrderTestButton.setVisible(false);
                    OrderTreatmentButton.setVisible(false);
                    OrderPatientNameLabel.setVisible(false);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_OrderCheckButtonActionPerformed

    private void OrderPatientIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderPatientIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderPatientIDTextFieldActionPerformed

    private void MyPatientCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyPatientCheckButtonActionPerformed
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        ChangeDrInchargeButton.setVisible(false);
        DischargeButton.setVisible(false);
        OrderButton.setVisible(false);
        ReferButton.setVisible(false);
        patientID = -1;

        try {
            patientID = Integer.parseInt(myPatientTextField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid PatientID");

        }
        String CheckSQL = null;
        PreparedStatement checkPrepStat;

        if (patientID == -1) {
            try {
                CheckSQL = "SELECT drPatientID, drPatient.patientID, firstName, lastName FROM drPatient,Person,Patient WHERE (Patient.NIC=Person.NIC AND drPatient.DrID=? AND drPatient.patientID =Patient.patientID )";
                checkPrepStat = DbcRecept.con.prepareStatement(CheckSQL);
                checkPrepStat.setString(1, UserEmpID);
                DbcRecept.rs = checkPrepStat.executeQuery();
                assignedPatientsTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));
            } catch (SQLException ex) {
                Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                p.setPatient(patientID);
                CheckSQL = "SELECT drPatientID, drPatient.patientID, firstName, lastName FROM drPatient,Person,Patient WHERE (Patient.NIC=Person.NIC AND drPatient.DrID=? AND drPatient.patientID=? AND drPatient.patientID =Patient.patientID)";
                checkPrepStat = DbcRecept.con.prepareStatement(CheckSQL);
                checkPrepStat.setString(1, UserEmpID);
                checkPrepStat.setInt(2, patientID);
                DbcRecept.rs = checkPrepStat.executeQuery();
                assignedPatientsTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));
            } catch (SQLException ex) {
                Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_MyPatientCheckButtonActionPerformed

    private void myPatientTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myPatientTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myPatientTextFieldActionPerformed

    private void OrderTreatmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderTreatmentButtonActionPerformed
        try {
            DBConnect DbcRecept = new DBConnect();
            DbcRecept.connectdb();
            String treatmentDescription = TreatDescriptionTextArea.getText();
            int treatCharges = -1;
            try {
                treatCharges = Integer.parseInt(TreatmentChargesTextField.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "charge field can only contain number");

            }

            if (treatmentDescription.isEmpty() || treatCharges == -1) {
                JOptionPane.showMessageDialog(null, "Fill all neccessay fields with valid information!!");
            } else {

                //add to table charges         
                String insertTreatmentSql = "INSERT INTO Treatment (date,description,drPatientID,charges) VALUES (?,?,?,?) ;";
                PreparedStatement insertTreatmentPrepStat;
                insertTreatmentPrepStat = DbcRecept.con.prepareStatement(insertTreatmentSql);
                //get today date 
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date today = new Date();

                insertTreatmentPrepStat.setString(1, dateFormat.format(today));
                insertTreatmentPrepStat.setString(2, treatmentDescription);
                insertTreatmentPrepStat.setInt(3, drPatientID);
                insertTreatmentPrepStat.setInt(4, treatCharges);

                insertTreatmentPrepStat.executeUpdate();

                //add to treatment
            }
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
        OrderTreatmentButton.setVisible(false);
    }//GEN-LAST:event_OrderTreatmentButtonActionPerformed

    private void OrderTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderTestButtonActionPerformed
        try {
            DBConnect DbcRecept = new DBConnect();
            DbcRecept.connectdb();
            String treatmentDescription = TestDescriptionTextArea.getText();
            int treatCharges = -1;
            try {
                treatCharges = Integer.parseInt(TestChargesTextField.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "charge field can only contain number");

            }

            if (treatmentDescription.isEmpty() || treatCharges == -1) {
                JOptionPane.showMessageDialog(null, "Fill all neccessay fields with valid information!!");
            } else {

                //add to table charges         
                String insertTestSql = "INSERT INTO Test (date,description,drPatientID,charges,result) VALUES (?,?,?,?,?) ;";
                PreparedStatement insertTestPrepStat;
                insertTestPrepStat = DbcRecept.con.prepareStatement(insertTestSql);
                //get today date 
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date today = new Date();

                insertTestPrepStat.setString(1, dateFormat.format(today));
                insertTestPrepStat.setString(2, treatmentDescription);
                insertTestPrepStat.setInt(3, drPatientID);
                insertTestPrepStat.setInt(4, treatCharges);
                insertTestPrepStat.setString(5, "");
                insertTestPrepStat.executeUpdate();

                //add to treatment
            }
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
        OrderTestButton.setVisible(false);
    }//GEN-LAST:event_OrderTestButtonActionPerformed

    private void assignedPatientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignedPatientsTableMouseClicked
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        int row = assignedPatientsTable.getSelectedRow();
        patientID = Integer.parseInt("" + assignedPatientsTable.getValueAt(row, 1));
        myPatientTextField.setText("" + patientID);
        p.setPatient(patientID);
        System.out.println("patients drId" + UserEmpID);
        System.out.println("doctors drId" + p.DrID);

        if (UserEmpID.equals(p.DrID)) {
            ChangeDrInchargeButton.setVisible(true);
            DischargeButton.setVisible(true);
        } else {
            ChangeDrInchargeButton.setVisible(false);
            DischargeButton.setVisible(false);
        }
        try {
            String getTreatmentDetailSQL = ("select  treatmentID, date, drID, description from Treatment,drPatient WHERE (drPatient.patientID=? and drPatient.drPatientID=Treatment.drPatientID);");
            PreparedStatement getTreatmentDetailPrepStat;
            getTreatmentDetailPrepStat = DbcRecept.con.prepareStatement(getTreatmentDetailSQL);
            getTreatmentDetailPrepStat.setInt(1, patientID);
            DbcRecept.rs = getTreatmentDetailPrepStat.executeQuery();

            TreatmentTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));

            String getTestmentDetailSQL = ("select  testID, date, drID, description,result from Test,drPatient WHERE (drPatient.patientID=? and drPatient.drPatientID=Test.drPatientID);");
            PreparedStatement getTestmentDetailPrepStat;
            getTestmentDetailPrepStat = DbcRecept.con.prepareStatement(getTestmentDetailSQL);
            getTestmentDetailPrepStat.setInt(1, patientID);
            DbcRecept.rs = getTestmentDetailPrepStat.executeQuery();

            TestTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));
            ReferButton.setVisible(true);
            OrderButton.setVisible(true);

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_assignedPatientsTableMouseClicked

    private void TreatmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TreatmentTableMouseClicked

        int row = TreatmentTable.getSelectedRow();
        String treatment = "" + TreatmentTable.getValueAt(row, 3);
        TreatmentTextArea.setText(treatment);

    }//GEN-LAST:event_TreatmentTableMouseClicked

    private void TestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TestTableMouseClicked
        int row = TestTable.getSelectedRow();
        String test = "" + TestTable.getValueAt(row, 3);
        String result = "" + TestTable.getValueAt(row, 4);

        TestTextArea.setText(test);
        ResultTextArea.setText(result);

    }//GEN-LAST:event_TestTableMouseClicked

    private void ReferADoctorCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReferADoctorCheckButtonActionPerformed
        AssignButton.setVisible(false);
        UnAssignedPannel.setVisible(true);
        try {
            DBConnect DbcRecept = new DBConnect();
            DbcRecept.connectdb();
            patientID = -1;
            try {
                patientID = Integer.parseInt(ReferADocTextField.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid PatientID");

            }
            if (patientID == -1) {

            } else {
                String CheckSQL = null;
                PreparedStatement checkPrepStat;
                CheckSQL = "SELECT drPatientID, drPatient.patientID, firstName, lastName FROM drPatient,Person,Patient WHERE (Patient.NIC=Person.NIC AND drPatient.DrID=? AND drPatient.patientID=? AND drPatient.patientID =Patient.patientID)";
                checkPrepStat = DbcRecept.con.prepareStatement(CheckSQL);
                checkPrepStat.setString(1, UserEmpID);
                checkPrepStat.setInt(2, patientID);
                DbcRecept.rs = checkPrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    drPatientID = DbcRecept.rs.getInt("drPatientID");
                    p.setPatient(patientID);
                    ReferDocPatientNameLabel.setText(p.firstName + " " + p.lastName);
                    ReferDocPatientNameLabel.setVisible(true);
                    String getAssignedDoctorsSQL = "SELECT Doctor.drID ,firstName, lastName, Doctor.Description FROM drPatient,Doctor,Person,Employee WHERE (drPatient.patientID=? AND drPatient.DrID=Doctor.drID AND Doctor.employeeID=Employee.employeeID AND Employee.NIC=Person.NIC);";
                    PreparedStatement getAssignedDoctorPrepStat;
                    getAssignedDoctorPrepStat = DbcRecept.con.prepareStatement(getAssignedDoctorsSQL);
                    getAssignedDoctorPrepStat.setInt(1, patientID);
                    DbcRecept.rs = getAssignedDoctorPrepStat.executeQuery();
                    AssignedDoctorsTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));

                    String getNOTAssignedDoctorsSQL = "SELECT Doctor.drID,firstName, lastName, Doctor.Description FROM drPatient,Doctor,Person,Employee WHERE ( Doctor.employeeID=Employee.employeeID AND Employee.NIC=Person.NIC AND Doctor.drID NOT IN (SELECT Doctor.drID FROM drPatient,Doctor,Person,Employee WHERE (drPatient.patientID=? AND drPatient.DrID=Doctor.drID AND Doctor.employeeID=Employee.employeeID AND Employee.NIC=Person.NIC)));";
                    PreparedStatement getNOTAssignedDoctorPrepStat;
                    getNOTAssignedDoctorPrepStat = DbcRecept.con.prepareStatement(getNOTAssignedDoctorsSQL);
                    getNOTAssignedDoctorPrepStat.setInt(1, patientID);
                    DbcRecept.rs = getNOTAssignedDoctorPrepStat.executeQuery();
                    notAssignedDoctorsTabls.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));

                } else {
                    JOptionPane.showMessageDialog(null, "No patient with given patientID is Assigned to you");
                    ReferDocPatientNameLabel.setVisible(false);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ReferADoctorCheckButtonActionPerformed

    private void OrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderButtonActionPerformed
        int row = assignedPatientsTable.getSelectedRow();
        patientID = Integer.parseInt("" + assignedPatientsTable.getValueAt(row, 1));
        OrderPatientIDTextField.setText("" + patientID);
        DoctorViewTabs.setSelectedIndex(1);

    }//GEN-LAST:event_OrderButtonActionPerformed

    private void ReferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReferButtonActionPerformed
        int row = assignedPatientsTable.getSelectedRow();
        patientID = Integer.parseInt("" + assignedPatientsTable.getValueAt(row, 1));
        ReferADocTextField.setText("" + patientID);
        DoctorViewTabs.setSelectedIndex(2);
    }//GEN-LAST:event_ReferButtonActionPerformed

    private void notAssignedDoctorsTablsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notAssignedDoctorsTablsMouseClicked
        int row = notAssignedDoctorsTabls.getSelectedRow();
        UserEmpID = "" + notAssignedDoctorsTabls.getValueAt(row, 0);
        NotAssignedDescTextArea.setText("" + notAssignedDoctorsTabls.getValueAt(row, 3));
        AssignButton.setVisible(true);
    }//GEN-LAST:event_notAssignedDoctorsTablsMouseClicked

    private void AssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignButtonActionPerformed
        try {
            DBConnect DbcRecept = new DBConnect();
            DbcRecept.connectdb();
            int row = notAssignedDoctorsTabls.getSelectedRow();
            UserEmpID = "" + notAssignedDoctorsTabls.getValueAt(row, 0);

            String insertDrPatientSql = "INSERT INTO drPatient (DrID,patientID) VALUES (?,?) ;";
            PreparedStatement insertDrPatientPrepStat;
            insertDrPatientPrepStat = DbcRecept.con.prepareStatement(insertDrPatientSql);
            insertDrPatientPrepStat.setString(1, UserEmpID);
            insertDrPatientPrepStat.setInt(2, patientID);
            insertDrPatientPrepStat.executeUpdate();
            String getAssignedDoctorsSQL = "SELECT Doctor.drID ,firstName, lastName, Doctor.Description FROM drPatient,Doctor,Person,Employee WHERE (drPatient.patientID=? AND drPatient.DrID=Doctor.drID AND Doctor.employeeID=Employee.employeeID AND Employee.NIC=Person.NIC);";
            PreparedStatement getAssignedDoctorPrepStat;
            getAssignedDoctorPrepStat = DbcRecept.con.prepareStatement(getAssignedDoctorsSQL);
            getAssignedDoctorPrepStat.setInt(1, patientID);
            DbcRecept.rs = getAssignedDoctorPrepStat.executeQuery();
            AssignedDoctorsTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));

        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AssignButtonActionPerformed

    private void ChangeDrInchargeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeDrInchargeButtonActionPerformed
        try {
            DoctorViewTabs.setSelectedIndex(2);
            DrInchargeButton.setVisible(true);
            ReferADocTextField.setText("" + patientID);
            UnAssignedPannel.setVisible(false);
            DBConnect DbcRecept = new DBConnect();
            DbcRecept.connectdb();
            String getAssignedDoctorsSQL = "SELECT Doctor.drID ,firstName, lastName, Doctor.Description FROM drPatient,Doctor,Person,Employee WHERE (drPatient.patientID=? AND drPatient.DrID=Doctor.drID AND Doctor.employeeID=Employee.employeeID AND Employee.NIC=Person.NIC);";
            PreparedStatement getAssignedDoctorPrepStat;
            getAssignedDoctorPrepStat = DbcRecept.con.prepareStatement(getAssignedDoctorsSQL);
            getAssignedDoctorPrepStat.setInt(1, patientID);
            DbcRecept.rs = getAssignedDoctorPrepStat.executeQuery();
            AssignedDoctorsTable.setModel(DbUtils.resultSetToTableModel(DbcRecept.rs));
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ChangeDrInchargeButtonActionPerformed

    private void DrInchargeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrInchargeButtonActionPerformed
        try {
            int row = AssignedDoctorsTable.getSelectedRow();
            DBConnect DbcRecept = new DBConnect();

            DbcRecept.connectdb();

            String changeDrInchargeSql = "UPDATE Patient set DrID=? Where patientID=?";
            PreparedStatement changeDrInchargePrepStat;
            changeDrInchargePrepStat = DbcRecept.con.prepareStatement(changeDrInchargeSql);
            changeDrInchargePrepStat.setString(1, "" + AssignedDoctorsTable.getValueAt(row, 0));
            changeDrInchargePrepStat.setInt(2, patientID);
            changeDrInchargePrepStat.executeUpdate();
            DrInchargeButton.setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DrInchargeButtonActionPerformed

    private void DischargeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DischargeButtonActionPerformed
        try {
            DBConnect DbcRecept = new DBConnect();
            
            DbcRecept.connectdb();
            
            String changeDrInchargeSql = "UPDATE Patient set dischargedDate=? Where patientID=?";
            PreparedStatement changeDrInchargePrepStat;
            changeDrInchargePrepStat = DbcRecept.con.prepareStatement(changeDrInchargeSql);
            
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            Date today = new Date();
            
            changeDrInchargePrepStat.setString(1, dateFormat.format(today));
            changeDrInchargePrepStat.setInt(2, patientID);
            changeDrInchargePrepStat.executeUpdate();
            DrInchargeButton.setVisible(false);
        } catch (SQLException ex) {
            Logger.getLogger(DoctorsView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_DischargeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorsView.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorsView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignButton;
    private javax.swing.JTable AssignedDoctorsTable;
    private javax.swing.JButton ChangeDrInchargeButton;
    private javax.swing.JButton DischargeButton;
    private javax.swing.JTabbedPane DoctorViewTabs;
    private javax.swing.JButton DrInchargeButton;
    private javax.swing.JButton MyPatientCheckButton;
    private javax.swing.JTextArea NotAssignedDescTextArea;
    private javax.swing.JButton OrderButton;
    private javax.swing.JButton OrderCheckButton;
    private javax.swing.JTextField OrderPatientIDTextField;
    private javax.swing.JLabel OrderPatientNameLabel;
    private javax.swing.JButton OrderTestButton;
    private javax.swing.JButton OrderTreatmentButton;
    private javax.swing.JTextField ReferADocTextField;
    private javax.swing.JButton ReferADoctorCheckButton;
    private javax.swing.JButton ReferButton;
    private javax.swing.JLabel ReferDocPatientNameLabel;
    private javax.swing.JTextArea ResultTextArea;
    private javax.swing.JTextField TestChargesTextField;
    private javax.swing.JTextArea TestDescriptionTextArea;
    private javax.swing.JTable TestTable;
    private javax.swing.JTextArea TestTextArea;
    private javax.swing.JTextArea TreatDescriptionTextArea;
    private javax.swing.JTextField TreatmentChargesTextField;
    private javax.swing.JTable TreatmentTable;
    private javax.swing.JTextArea TreatmentTextArea;
    private javax.swing.JPanel UnAssignedPannel;
    private javax.swing.JTable assignedPatientsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField myPatientTextField;
    private javax.swing.JTable notAssignedDoctorsTabls;
    private javax.swing.JPanel notAssignedDrPanel;
    private javax.swing.JPanel patientName;
    // End of variables declaration//GEN-END:variables
}
