/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagementsystem;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author oshan
 */
public class ReceptView extends javax.swing.JFrame {

    Person PersonPatient = new Person();
    Person PersonGuardian = new Person();
    Patient thePatient = new Patient();
    Doctor OPDDoctor = new Doctor();
    boolean condMark = false;
    Receptionist TheRecep = new Receptionist();

    /**
     * Creates new form ReceptView
     */
    public ReceptView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        recepsTabedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        p_contactNoTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        p_firstNameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        p_lastNameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        p_addressTextField = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        p_nicTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        p_female = new javax.swing.JRadioButton();
        patientCheckButton = new javax.swing.JButton();
        P_DOB = new com.toedter.calendar.JDateChooser();
        p_male = new javax.swing.JRadioButton();
        jLabel21 = new javax.swing.JLabel();
        relationship = new javax.swing.JPanel();
        g_contactNoTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        g_firstNameTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        g_lastNameTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        g_addressTextField = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        g_nicTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        g_male = new javax.swing.JRadioButton();
        g_female = new javax.swing.JRadioButton();
        guardianCheckButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        G_DOB = new com.toedter.calendar.JDateChooser();
        bill = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextArea();
        admit = new javax.swing.JButton();
        relationLable = new javax.swing.JLabel();
        relation = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        testTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        treatmentTable = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        toBePaidTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        paidAmountTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        TotalTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        payingAmount = new javax.swing.JTextField();
        pay = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        billPatientIDTextField = new javax.swing.JTextField();
        billPatientCheck = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        billDisplayArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        empID = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        CheckEmpID = new javax.swing.JButton();
        MarkAttendance = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        displayDetails = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient  Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel4.add(p_contactNoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 270, -1));

        jLabel3.setText("NIC");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 30));

        jLabel4.setText("First Name");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 30));
        jPanel4.add(p_firstNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 270, -1));

        jLabel5.setText("Last Name");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, 30));
        jPanel4.add(p_lastNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 270, -1));

        jLabel6.setText("Contact No.");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, 30));

        p_addressTextField.setColumns(20);
        p_addressTextField.setRows(5);
        jScrollPane1.setViewportView(p_addressTextField);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 270, -1));

        jLabel7.setText("Address");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, 30));
        jPanel4.add(p_nicTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 180, -1));

        jLabel8.setText("Gender");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, 40));

        buttonGroup1.add(p_female);
        p_female.setText("Female");
        jPanel4.add(p_female, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 280, -1, -1));

        patientCheckButton.setText("check");
        patientCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCheckButtonActionPerformed(evt);
            }
        });
        jPanel4.add(patientCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 90, 30));
        jPanel4.add(P_DOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, 180, 30));

        buttonGroup1.add(p_male);
        p_male.setText("Male");
        jPanel4.add(p_male, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, -1, -1));

        jLabel21.setText("DOB");
        jPanel4.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, 30));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 380, 310));

        relationship.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Guardian Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        relationship.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        relationship.add(g_contactNoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 270, -1));

        jLabel10.setText("NIC");
        relationship.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 30));

        jLabel11.setText("First Name");
        relationship.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 30));
        relationship.add(g_firstNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 270, -1));

        jLabel12.setText("Last Name");
        relationship.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, 30));
        relationship.add(g_lastNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 270, -1));

        jLabel13.setText("Contact No.");
        relationship.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, 30));

        g_addressTextField.setColumns(20);
        g_addressTextField.setRows(5);
        jScrollPane2.setViewportView(g_addressTextField);

        relationship.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 270, -1));

        jLabel14.setText("Address");
        relationship.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, 30));
        relationship.add(g_nicTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 170, -1));

        jLabel15.setText("Gender");
        relationship.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, -1, 40));

        buttonGroup2.add(g_male);
        g_male.setText("Male");
        relationship.add(g_male, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, -1, -1));

        buttonGroup2.add(g_female);
        g_female.setText("Female");
        relationship.add(g_female, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, -1, -1));

        guardianCheckButton.setText("check");
        guardianCheckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardianCheckButtonActionPerformed(evt);
            }
        });
        relationship.add(guardianCheckButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, 100, 30));

        jLabel2.setText("DOB");
        relationship.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, -1, 30));
        relationship.add(G_DOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 240, 190, 30));

        jPanel1.add(relationship, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 380, 310));

        bill.setText("Bill");
        bill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billActionPerformed(evt);
            }
        });
        jPanel1.add(bill, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 370, 100, 40));

        displayArea.setColumns(20);
        displayArea.setRows(5);
        jScrollPane5.setViewportView(displayArea);

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 650, 90));

        admit.setText("Admit");
        admit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                admitActionPerformed(evt);
            }
        });
        jPanel1.add(admit, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 420, 100, 40));

        relationLable.setText("Guardians realationship to patient");
        jPanel1.add(relationLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, 30));
        jPanel1.add(relation, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 330, 400, 30));

        recepsTabedPane.addTab("Manage Patient", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Charges", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        testTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(testTable);

        jPanel3.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 360, 220));

        treatmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(treatmentTable);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 380, 220));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 75, 770, 280));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Bill", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        toBePaidTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toBePaidTextFieldActionPerformed(evt);
            }
        });
        jPanel10.add(toBePaidTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 160, -1));

        jLabel17.setText("Paid Amount");
        jPanel10.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 30));

        paidAmountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidAmountTextFieldActionPerformed(evt);
            }
        });
        jPanel10.add(paidAmountTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 160, -1));

        jLabel18.setText("Amount to be paid");
        jPanel10.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, 30));
        jPanel10.add(TotalTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 160, -1));

        jLabel20.setText("Full amount");
        jPanel10.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 30));
        jPanel10.add(payingAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 280, -1));

        pay.setText("Pay");
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });
        jPanel10.add(pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 60, 120, 50));

        jPanel2.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 770, 120));

        jLabel16.setText("Patient ID");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 17, -1, 30));
        jPanel2.add(billPatientIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 170, -1));

        billPatientCheck.setText("Check");
        billPatientCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billPatientCheckActionPerformed(evt);
            }
        });
        jPanel2.add(billPatientCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 100, 30));

        billDisplayArea.setColumns(20);
        billDisplayArea.setRows(5);
        jScrollPane7.setViewportView(billDisplayArea);

        jPanel2.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 390, 60));

        recepsTabedPane.addTab("Billing", jPanel2);

        jLabel9.setText("Employee ID");

        jLabel19.setText("details");

        CheckEmpID.setText("check");
        CheckEmpID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckEmpIDActionPerformed(evt);
            }
        });

        MarkAttendance.setText("Mark Attendance");
        MarkAttendance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarkAttendanceActionPerformed(evt);
            }
        });

        displayDetails.setColumns(20);
        displayDetails.setRows(5);
        jScrollPane8.setViewportView(displayDetails);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addComponent(jLabel9))
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MarkAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(empID, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CheckEmpID, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(422, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckEmpID)
                    .addComponent(jLabel9))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel19))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(MarkAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        recepsTabedPane.addTab("Staff Attendance", jPanel5);

        jLabel1.setText(" - Reception -");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recepsTabedPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recepsTabedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void billActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billActionPerformed
        recepsTabedPane.setSelectedIndex(1);
        billPatientIDTextField.setText("" + thePatient.patientID);

        // TODO add your handling code here:
    }//GEN-LAST:event_billActionPerformed

    private void admitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_admitActionPerformed
        //handle patients personal details gain through recep view admit patient page;

        handlePeronalData(PersonPatient, p_nicTextField, p_firstNameTextField, p_lastNameTextField, p_addressTextField, p_contactNoTextField, p_female, p_male, P_DOB);

        handlePeronalData(PersonGuardian, g_nicTextField, g_firstNameTextField, g_lastNameTextField, g_addressTextField, g_contactNoTextField, g_female, g_male, G_DOB);

        HandlePatientData(PersonPatient, PersonGuardian);

    }//GEN-LAST:event_admitActionPerformed

    void HandlePatientData(Person patient, Person guardian) {
        OPDDoctor.setDoctor(1001);
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        String checkPatient = "SELECT * FROM Patient WHERE (dischargedDate IS NULL and NIC=?);";
        PreparedStatement checkPatientPrepStat;
        try {
            checkPatientPrepStat = DbcRecept.con.prepareStatement(checkPatient);
            checkPatientPrepStat.setString(1, patient.NIC);
            DbcRecept.rs = checkPatientPrepStat.executeQuery();
            //patient is already admitted 
            if (DbcRecept.rs.next()) {
                System.out.println("patient already admitted");

                //create a instance of patient class
                thePatient = new Patient(DbcRecept.rs);

                //display necessary information on displayArea
                displayArea.setText("patient already admitted" + "\nPatient ID : " + thePatient.patientID + "\nWard : " + thePatient.wardID + "\n Admitted Date" + thePatient.admittedDate + "\nIncharge Doctor ID : " + thePatient.DrID + "\nIncharge Doctor : " + thePatient.getDoctorsName());

            } //patient is not admitted yet 
            else {
                //issue patient id, assign a doctor and insert values to patient table
                System.out.println("partient have not admitted. admiting patient now");
                System.out.println("inserting values...");
                String insertPatientSql = "INSERT INTO Patient (admittedDate, paidAmount, NIC, guardianNIC, guardRel, DrID, wardID) VALUES (?,?,?,?,?,?,?) ;";
                PreparedStatement insertPatientPrepStat;
                insertPatientPrepStat = DbcRecept.con.prepareStatement(insertPatientSql);

                //get today (machines current date) and add it as admitted date
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                Date today = new Date();
                //default ward as opd and set drIncharge as head of opd
                insertPatientPrepStat.setString(1, dateFormat.format(today));
                insertPatientPrepStat.setInt(2, 0);
                insertPatientPrepStat.setString(3, patient.NIC);
                insertPatientPrepStat.setString(4, guardian.NIC);
                String relationship = relation.getText();
                if (relationship.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "please, fill realationship field");
                } else {
                    insertPatientPrepStat.setString(5, relationship);
                    insertPatientPrepStat.setString(6, OPDDoctor.drID);
                    insertPatientPrepStat.setString(7, OPDDoctor.wardID);
                    insertPatientPrepStat.executeUpdate();
                    //asuring whether data is inserted in correct manner and getting patient id;
                    checkPatient = "SELECT * FROM Patient WHERE (NIC=? and dischargedDate IS NULL);";
                    checkPatientPrepStat = DbcRecept.con.prepareStatement(checkPatient);
                    checkPatientPrepStat.setString(1, patient.NIC);
                    DbcRecept.rs = checkPatientPrepStat.executeQuery();
                    DbcRecept.rs.next();
                    thePatient = new Patient(DbcRecept.rs);
                    relation.setText("" + thePatient.guardRel);
                    displayArea.setText("patient successfully admitted" + "\nPatient ID : " + thePatient.patientID + "\nWard : " + thePatient.wardID + "\nAdmitted Date" + thePatient.admittedDate + "\nIncharge Doctor ID : " + thePatient.DrID + "\nIncharge Doctor : " + thePatient.getDoctorsName());

                    String insertDrPatientSql = "INSERT INTO drPatient (DrID, patientID) VALUES (?,?) ;";
                    PreparedStatement insertDrPatientPrepStat;
                    insertDrPatientPrepStat = DbcRecept.con.prepareStatement(insertDrPatientSql);
                    insertDrPatientPrepStat.setString(1, OPDDoctor.drID);
                    insertDrPatientPrepStat.setInt(2, thePatient.patientID);
                    insertDrPatientPrepStat.executeUpdate();
                    System.out.println("patient successfully admitted");

                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void handlePeronalData(Person p, javax.swing.JTextField nicTextField, javax.swing.JTextField firstNameTextField, javax.swing.JTextField lastNameTextField, javax.swing.JTextArea addressTextField, javax.swing.JTextField contactNoTextField, javax.swing.JRadioButton female, javax.swing.JRadioButton male, com.toedter.calendar.JDateChooser DOBpicker) {
        System.out.println("in handlePeronalData method ");
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        Date date_DOB = DOBpicker.getDate();
        System.out.println("selected Dob " + date_DOB);
        String DOB = "";
        if (date_DOB != null) {
            //changing date format to compatible with MySQL
            System.out.println("date is selcted");
            SimpleDateFormat Date_Format = new SimpleDateFormat("yyyy-MM-dd");
            DOB = Date_Format.format(date_DOB);
        }
        String NIC = nicTextField.getText();
        String firstName = firstNameTextField.getText();
        String lastName = lastNameTextField.getText();
        String address = addressTextField.getText();
        String contactNumber = contactNoTextField.getText();
        String gender = "";

        //getting user input data of gender
        if (male.isSelected()) {
            gender = "M";
        } else if (female.isSelected()) {
            gender = "F";
        }

        //setting attributes of regarding person class 
        p.NIC = NIC;
        p.firstName = firstName;
        p.lastName = lastName;
        p.address = address;
        p.contactNumber = contactNumber;
        p.gender = gender;
        p.DOB = DOB;

        // check whether there are any empty fields
        if (DOB.isEmpty() || NIC.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || address.isEmpty() || contactNumber.isEmpty() || gender.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Some fields are left blank, Fill all fields correctly.");
        } //if all fields are filled
        else {
            System.out.println("all fields are filled acodingly");
            String existSql = "SELECT * FROM Person WHERE NIC=?;";
            PreparedStatement checkPrepStat;
            try {
                checkPrepStat = DbcRecept.con.prepareStatement(existSql);
                checkPrepStat.setString(1, nicTextField.getText());
                DbcRecept.rs = checkPrepStat.executeQuery();
                //this else is when patients personal information already in data base;
                if (DbcRecept.rs.next()) {
                    //update patients personal data
                    System.out.println("updating values...");
                    String updateSql = "UPDATE Person SET firstName=?, lastName=?, address=?, contactNumber=?, gender=?, DOB=? WHERE NIC= ? ;";
                    PreparedStatement updatePrepStat;
                    updatePrepStat = DbcRecept.con.prepareStatement(updateSql);
                    updatePrepStat.setString(1, firstName);
                    updatePrepStat.setString(2, lastName);
                    updatePrepStat.setString(3, address);
                    updatePrepStat.setString(4, contactNumber);
                    updatePrepStat.setString(5, gender);
                    updatePrepStat.setString(6, DOB);
                    updatePrepStat.setString(7, NIC);
                    updatePrepStat.executeUpdate();

                } //this if is when patients personal information doesnt exist in the data base
                else {
                    //insert patients personal data to person table;
                    System.out.println("inserting values...");
                    String insertSql = "INSERT INTO Person (NIC, firstName ,lastName ,address ,contactNumber ,gender ,DOB) VALUES (?,?,?,?,?,?,?) ;";
                    PreparedStatement insertPrepStat;
                    insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                    insertPrepStat.setString(1, NIC);
                    insertPrepStat.setString(2, firstName);
                    insertPrepStat.setString(3, lastName);
                    insertPrepStat.setString(4, address);
                    insertPrepStat.setString(5, contactNumber);
                    insertPrepStat.setString(6, gender);
                    insertPrepStat.setString(7, DOB);

                    insertPrepStat.executeUpdate();

                }

            } catch (SQLException ex) {
                Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }


    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        int amount = -1;
        try {
            amount = Integer.parseInt(payingAmount.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Enter a valid amount");

        }
        if (amount > 0) {
            thePatient.paidAmount = TheRecep.HandlePayment(thePatient, amount);
            
            int total = TheRecep.getPatientsTotalTestCharges(thePatient) + TheRecep.getPatientsTotalTreatmentCharges(thePatient);
            paidAmountTextField.setText("" + thePatient.paidAmount);
            toBePaidTextField.setText("" + (total - thePatient.paidAmount));
        } else {
            JOptionPane.showMessageDialog(null, "Enter a valid amount");
        }
    }//GEN-LAST:event_payActionPerformed

    private void billPatientCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billPatientCheckActionPerformed
        String displayText = "";
        int patientID = -1;
        try {
            patientID = Integer.parseInt(billPatientIDTextField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Patient ID cannot be left Blank");
        }
        if (thePatient.patientID != -1) {
            if (thePatient.setPatient(patientID)) {
                displayText = thePatient.firstName + " " + thePatient.lastName + "\n"
                        + "admitted Date: " + thePatient.admittedDate + "\n";

                ResultSet Tests = TheRecep.getPatientsTestChargesDetails(thePatient);
                testTable.setModel(DbUtils.resultSetToTableModel(Tests));

                ResultSet Treatments = TheRecep.getPatientsTreatmentChargesDetails(thePatient);
                treatmentTable.setModel(DbUtils.resultSetToTableModel(Treatments));

                billDisplayArea.setText(displayText);
            } else {
                billDisplayArea.setText("no patient with given patientID");
            }

        } else {
            billDisplayArea.setText("not a valid PatientID");
        }
        int total = TheRecep.getPatientsTotalTestCharges(thePatient) + TheRecep.getPatientsTotalTreatmentCharges(thePatient);
        TotalTextField.setText("" + total);
        paidAmountTextField.setText("" + thePatient.paidAmount);
        toBePaidTextField.setText("" + (total - thePatient.paidAmount));


    }//GEN-LAST:event_billPatientCheckActionPerformed

    private void patientCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCheckButtonActionPerformed
        String nic = p_nicTextField.getText();
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        if (nic != null) {
            String checkSql = "SELECT * FROM Person WHERE NIC=?;";
            PreparedStatement checkPrepStat;
            try {
                checkPrepStat = DbcRecept.con.prepareStatement(checkSql);
                checkPrepStat.setString(1, nic);
                DbcRecept.rs = checkPrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    PersonPatient = new Person(DbcRecept.rs);
                    setPatientsPeronalDetails(PersonPatient);
                } else {
                    clearPatientsPeronalDetails();
                }
            } catch (SQLException ex) {
                clearPatientsPeronalDetails();
                Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_patientCheckButtonActionPerformed

    private void guardianCheckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardianCheckButtonActionPerformed
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        String nic = g_nicTextField.getText();
        if (nic != null) {
            String checkSql = "SELECT * FROM Person WHERE NIC=?;";
            PreparedStatement checkPrepStat;
            try {
                checkPrepStat = DbcRecept.con.prepareStatement(checkSql);
                checkPrepStat.setString(1, g_nicTextField.getText());
                DbcRecept.rs = checkPrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    PersonGuardian = new Person(DbcRecept.rs);
                    setGuardiansPeronalDetails(PersonGuardian);
                } else {
                    clearGuardiansPeronalDetails();
                }
            } catch (SQLException ex) {
                clearPatientsPeronalDetails();
                Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_guardianCheckButtonActionPerformed

    private void CheckEmpIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckEmpIDActionPerformed
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        String employeeID = empID.getText();
        String empName = "";
        condMark = false;
        try {
            String getEmpNameSQL = ("select Firstname,lastName from Person,Employee where Employee.employeeID=? and Employee.NIC=Person.NIC;");
            PreparedStatement getEmpNamePrepStat;
            getEmpNamePrepStat = DbcRecept.con.prepareStatement(getEmpNameSQL);
            getEmpNamePrepStat.setString(1, employeeID);
            DbcRecept.rs = getEmpNamePrepStat.executeQuery();
            if (DbcRecept.rs.next()) {
                empName = DbcRecept.rs.getString(1) + " " + DbcRecept.rs.getString(2);

                String checkSql = "SELECT * FROM Attendance WHERE (DATE(Date) = CURDATE() and employeeID=?);";
                PreparedStatement checkPrepStat;
                checkPrepStat = DbcRecept.con.prepareStatement(checkSql);
                checkPrepStat.setString(1, employeeID);
                DbcRecept.rs = checkPrepStat.executeQuery();
                if (DbcRecept.rs.next()) {
                    displayDetails.setText("Today Attendance for \n" + empName + " \nalready marked!");
                    condMark = false;
                } else {
                    condMark = true;
                    displayDetails.setText("Employee Name: " + empName + "\n For today, \nAttendance NOT marked yet");

                }
            } else {
                condMark = false;
                displayDetails.setText("No such Employee ID found !!");

            }
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_CheckEmpIDActionPerformed

    private void MarkAttendanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarkAttendanceActionPerformed
        DBConnect DbcRecept = new DBConnect();
        DbcRecept.connectdb();
        if (condMark) {
            try {
                String insertSql = "INSERT INTO Attendance (employeeID,Date) VALUES (?,?) ;";
                PreparedStatement insertPrepStat;
                insertPrepStat = DbcRecept.con.prepareStatement(insertSql);
                insertPrepStat.setString(1, empID.getText());
                java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                insertPrepStat.setTimestamp(2, date);
                insertPrepStat.executeUpdate();
                displayDetails.setText(displayDetails.getText() + "\nprocessing....\nAttendance Successfully Marked");

                condMark = false;
            } catch (SQLException ex) {
                Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "attendance for given employeeID already mared or employee id Havent checked!!");
            condMark = false;
        }
    }//GEN-LAST:event_MarkAttendanceActionPerformed

    private void paidAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidAmountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paidAmountTextFieldActionPerformed

    private void toBePaidTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toBePaidTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toBePaidTextFieldActionPerformed

    void setPatientsPeronalDetails(Person p) {
        p_nicTextField.setText(p.NIC);
        p_lastNameTextField.setText(p.lastName);
        p_firstNameTextField.setText(p.firstName);
        p_addressTextField.setText(p.address);
        p_contactNoTextField.setText(p.contactNumber);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            P_DOB.setDate(format.parse(p.DOB));
        } catch (ParseException ex) {
            Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (p.gender.equals("M")) {
            p_male.setSelected(rootPaneCheckingEnabled);

        } else if (p.gender.equals("F")) {
            p_female.setSelected(rootPaneCheckingEnabled);
        }
    }

    void setGuardiansPeronalDetails(Person p) {
        g_nicTextField.setText(p.NIC);
        g_lastNameTextField.setText(p.lastName);
        g_firstNameTextField.setText(p.firstName);
        g_addressTextField.setText(p.address);
        g_contactNoTextField.setText(p.contactNumber);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        try {
            G_DOB.setDate(format.parse(p.DOB));
        } catch (ParseException ex) {
            Logger.getLogger(ReceptView.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (p.gender.equals("M")) {
            g_male.setSelected(true);

        } else if (p.gender.equals("F")) {
            g_female.setSelected(true);
        }
    }

    void clearPatientsPeronalDetails() {
        p_nicTextField.setText("");
        p_lastNameTextField.setText("");
        p_firstNameTextField.setText("");
        p_addressTextField.setText("");
        p_contactNoTextField.setText("");
        p_male.setSelected(false);
        p_female.setSelected(false);
        P_DOB.setDate(null);

    }

    void clearGuardiansPeronalDetails() {
        g_nicTextField.setText("");
        g_lastNameTextField.setText("");
        g_firstNameTextField.setText("");
        g_addressTextField.setText("");
        g_contactNoTextField.setText("");
        g_male.setSelected(false);
        g_female.setSelected(false);
        G_DOB.setDate(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceptView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReceptView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckEmpID;
    private com.toedter.calendar.JDateChooser G_DOB;
    private javax.swing.JButton MarkAttendance;
    private com.toedter.calendar.JDateChooser P_DOB;
    private javax.swing.JTextField TotalTextField;
    private javax.swing.JButton admit;
    private javax.swing.JButton bill;
    private javax.swing.JTextArea billDisplayArea;
    private javax.swing.JButton billPatientCheck;
    private javax.swing.JTextField billPatientIDTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextArea displayArea;
    private javax.swing.JTextArea displayDetails;
    private javax.swing.JTextField empID;
    private javax.swing.JTextArea g_addressTextField;
    private javax.swing.JTextField g_contactNoTextField;
    private javax.swing.JRadioButton g_female;
    private javax.swing.JTextField g_firstNameTextField;
    private javax.swing.JTextField g_lastNameTextField;
    private javax.swing.JRadioButton g_male;
    private javax.swing.JTextField g_nicTextField;
    private javax.swing.JButton guardianCheckButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea p_addressTextField;
    private javax.swing.JTextField p_contactNoTextField;
    private javax.swing.JRadioButton p_female;
    private javax.swing.JTextField p_firstNameTextField;
    private javax.swing.JTextField p_lastNameTextField;
    private javax.swing.JRadioButton p_male;
    private javax.swing.JTextField p_nicTextField;
    private javax.swing.JTextField paidAmountTextField;
    private javax.swing.JButton patientCheckButton;
    private javax.swing.JButton pay;
    private javax.swing.JTextField payingAmount;
    private javax.swing.JTabbedPane recepsTabedPane;
    private javax.swing.JTextField relation;
    private javax.swing.JLabel relationLable;
    private javax.swing.JPanel relationship;
    private javax.swing.JTable testTable;
    private javax.swing.JTextField toBePaidTextField;
    private javax.swing.JTable treatmentTable;
    // End of variables declaration//GEN-END:variables
}
